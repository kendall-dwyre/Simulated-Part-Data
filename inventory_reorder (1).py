# -*- coding: utf-8 -*-
"""Inventory_Reorder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vIylHAtImh1DVLKgSLd0ylM2eq2n7gGm
"""

import pandas as pd
import numpy as np

# Load the dataset from the file
file_path = 'expanded_parts_tracking_dataset.csv'  # Replace with the correct file path
parts_expanded_df = pd.read_csv(file_path)

# Set discount rate
discount_rate = 0.10  # 10% discount for bulk purchases

# Calculate potential savings from bulk discounts
parts_expanded_df['Potential_Savings'] = 0
parts_expanded_df.loc[parts_expanded_df['Bulk_Discount_Available'] == 'Yes', 'Potential_Savings'] = (
    parts_expanded_df['Cost_per_Unit'] * discount_rate * parts_expanded_df['Quantity_on_Hand']
)

# Calculate reorder points based on lead time and usage
# Formula: Reorder Point = Lead Time (days) * (Average Monthly Usage / 30 days)
parts_expanded_df['Reorder_Point'] = parts_expanded_df['Lead_Time_Days'] * (parts_expanded_df['Average_Monthly_Usage'] / 30)

# Aggregate the data to see total usage, potential savings, and reorder points
deep_dive_analysis = parts_expanded_df.groupby('Part_Name').agg(
    Total_Usage=('Average_Monthly_Usage', 'sum'),
    Average_Cost_per_Unit=('Cost_per_Unit', 'mean'),
    Total_Potential_Savings=('Potential_Savings', 'sum'),
    Optimal_Reorder_Point=('Reorder_Point', 'mean'),
    Average_Lead_Time=('Lead_Time_Days', 'mean')
).reset_index()

# Sort by potential savings to identify the most beneficial bulk purchases
deep_dive_analysis_sorted = deep_dive_analysis.sort_values(by='Total_Potential_Savings', ascending=False)

# Display the analysis results
print(deep_dive_analysis_sorted)